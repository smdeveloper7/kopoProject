# -*- coding: utf-8 -*-
"""modelLoad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J6iSw0W2Ap8EbZqSlesu5qhqo9Tz1KmZ
"""

# 서버 관리용 fastapi 의존 라이브러리
import uvicorn
# pip install fastapi uvicorn

# fast api 라이브러리
# 비동기 처리가 가능한 파이선 웹 서버 라이브러리
from fastapi import FastAPI

# 머신러닝 모델 관리용 라이브러리
# 데이터 바이너리 저장용 라이브러리
# 데이터 타입을 그대로 보존
import pickle

# 데이터프레임 및 수 처리 라이브러리
import pandas as pd
import numpy as np

# 인터페이스 데이터 관리를 위한 라이브러리
from pydantic import BaseModel

#유니온을 사용하기위한 라이브러리
from typing import Union

#!pip install uvicorn=='0.29.0'
# !pip install fastapi=='0.111.0'

##cors정책
from fastapi.middleware.cors import CORSMiddleware
# from google.colab import drive
# drive.mount("/content/gdrive")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/중간고사 과제/codeset



import pickle

# pickle 파일 로드
with open("./hyuldang_models_dict.dump", "rb") as fr:
    model_feature_dict = pickle.load(fr)

# 딕셔너리 순회하면서 모델과 특징에 접근
models = {}
features_dict = {}
when_eat_dict = {}
i = 0;
for key, value in model_feature_dict.items():
    model_name = key
    model = value['model']
    features = value['features']
    when_eat = value['when_eat']
    models[i] = model
    features_dict[i] = features
    when_eat_dict[i] = when_eat
    i+=1
    # 이후 모델과 특징을 사용하는 코드 작성
    print(f"Model name: {model_name}")
    print("Model:", model)
    print("Features:", features)
    print("언제먹니:", when_eat)

#공복일 경우
class InDataset(BaseModel):
    smm: float
    pbf:float
    bmr:float
    wt:float
    bmi:float
    when_eat:int

app = FastAPI(title = "ML API")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 모든 출처 허용. 필요한 경우 적절한 출처를 명시하세요.
    allow_credentials=True,
    allow_methods=["*"],  # 모든 HTTP 메서드 허용
    allow_headers=["*"],  # 모든 헤더 허용
)

@app.get("/")
async def root():
    return {"message":"hello server is running"}



# for i in range(len(model_feature_dict)):
#     model = value['model']
#     features = value['features']
#     when_eat = value['when_eat']
#      # 모델과 특징을 딕셔너리에 저장
#     models[i] = model
#     features_dict[i] = features
#     when_eat_dict[i] = when_eat

@app.post("/predict1", status_code=200)
async def predict_ml(x:InDataset):
    when_eat = x.when_eat
    featcureColumn=[]
    if when_eat == 0:
        model = models[0]
        featcureColumn=[x.smm]
    elif when_eat == 1:
        model = models[1]
        featcureColumn=[x.pbf]
    elif when_eat == 2:
        model = models[2]
        featcureColumn=[x.pbf,x.bmr]
    elif when_eat == 3:
        model = models[3]
        featcureColumn=[x.wt,x.bmi]
    else:
        return {"error": "Invalid when_eat value"}

    # 이중리스트 : 행
    testDf = pd.DataFrame([featcureColumn])

    # 예측결과가 여러 개일 때 view로 던질 때 리스트, 단일 값, 딕셔너리 등 지정해주기
    predictValue = int(models[when_eat].predict(testDf)[0])
    interfaceResult = {"result": predictValue}
    return interfaceResult

if __name__ == "__main__":
    #app = 파일이름
    #host 0000 : 모든 곳에서 받는다
    uvicorn.run("app:app", host="0.0.0.0", port=9999, log_level="debug", proxy_headers=True)